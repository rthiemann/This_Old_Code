outCider

by Paul Raymer

Scanner

Throughout this magazine—and most of the others you may read—you will find serious articles suggesting that your computer can do amazing number-crunching, alpha-reasoning, graphic-miracle things.

Of course it can. That's why you bought it! But, can you make it do those things? I never could.

I did have a wonderful time with my computer, though, just running simple programs that at least did something. As a natural klutz I never could get the two cross hairs to hit a space jerque, and to this day I find it hard to remember which comes first, the O or the H, in the formula for water.

Debit and credit, of course, are impossible.

I refuse to talk about Boolean logic at any time. I find it hard enough to spell.

Then I found out that if I just picked up a simple routine—from a magazine, from reviewing the Basic statements in a program, or from reading a "hint"—I could build a program around that routine. Finally, a thousand syntax errors later, I could get something to work—something I did—and it was all worth while .

Computing can be fun if you can make your machine do something. Join me. I'd like your viewpoint... and your program ideas.

For years I tried to develop a computer program to help my youngster learn how to spell. The project was difficult; no matter how much research I did at the blackjack tables, the roulette wheels or the crap layouts, I never was able to develop the right algorithm.

When my son was married recently, I decided that perhaps his interest in computer spelling might be diminishing. The heart of the program I'd been working on was called the ABC Finder, but, assuming the age level of my audience has risen, I have renamed it the Scanner.

You'll find it an easy program to type from a magazine into a computer because I have followed certain cardinal rules:

1. All of the characters in the listing are on your Apple keyboard.
2. Everything is neatly arranged.
3. Most lines are single statements. The program is easier to follow that way. Later on, if you wish, you can combine statements into one long line. Then your program will run faster and be more memory efficient. Big deal.
4. Ample remarks describe what's happening.
5. No profanity, poor grammar, hex or machine language is included.
The game is fun—if you can ever get it to run. You get a chance to spell a bunch of words from a large selection of letters, and it's really dandy how the little devils pop about the screen.

Hint: Spell small words. You get more points, and will probably spell them more nearly correctly. You do not have to be a good speller to play this game. In fact you don't have to be a good speller to do much of anything any more. Sigh.

The Program

Here is the Scanner program! Don't fret, it's not as long as it appears to be, and most of the lines are short and easy to type. Warning: Watch out for line 210.

Line 100 clears the screen for action.

Lines 120-180 give well deserved credit to the author of this program.

Line 190 establishes the value of a variable. I read in a book somewhere that if you use the variable instead of the actual value, the program will run faster. I used it here because this is the number to make the buzzer work and it is such a darned long number, I usually get it wrong. N, I can get right.

Line 200 is a jazzy way of making a long dotted line. You could just say L$ = "=== for 40 spaces" but this way is easier and neater. You may want to change its value, and with this technique you can. It is used here because periodically I like to show off this great dearth of knowledge I have!

Line 210 asks if you need to read instructions. If you don't, answer Y and the program goes on its merry way. You only get to see the rules if you insist. Had the same problem with my marriage certificate-but that is described in more detail in my book, "What do they mean when they say Double Occupancy in the Las Vegas Hotel commercials?"

Line 220 prints the title very slowly. I got the idea for this from a program sent in by Hartley G. Lesser (now on inCider's staff) to the National User-Dump Group. I'm the chairman of their Nevada Chapter.

Lines 230-270 set up the alphabet display. Line 230 directs the program to create 39 letters. Then line 240 creates a random number. Line 250 adds 128 to the number so it can be poked into the right place. Line 260 makes noise (no wonder). Line 270 keeps the excitement going. Try this by not adding the number 128 in line 250-your program will look different. Exciting.

And it probably won't work.

Line 280 puts the cursor at the bottom of the screen, out of harm's way, and asks you to pick a letter. It then clears the line with CALL -868. It assigns a value of 1 to J, for a reason which escapes me now. I may think of it later.

Line 290 is a goof catcher. If the character selected is not a letter but a period, its ASCII number must be changed to a higher one; use 110. If you have one of those charts, you'll see that CHR$(110) is a lowercase n. Don't fret, I'll never use it that way.

Line 300 changes the value of the collected letters by adding 64 to them. Hey! That makes· the n a period again when it becomes CHR$(174). Boy, I'm glad that's over.

Now scan the line.

Lines 320-340 look through the letters in the row. If a letter is found that· matches your selection, then you've scored a hit. That is, if S (which is the value of the letter in the row) equals B (the value of the selected number, to which we added 64 to make it talk the same language to the poke/peek/thing) then the program will go to line 360.

Line 350 comes up if no match was made, so the program skips all the neat stuff and goes to 750 where it has some routine chores to do.

Line 370 is that dotted line again.

Line 380 puts a blank space in the spot where the letter you selected was. It found it because line 330 can't keep a secret and so we know that the letter you selected was at X. Not any more. Now it is a blank space (ASCII 160 is a blank space in peek/poke talk).

Lines 390-450 are going to drop the letter down. Actually nothing drops. A blank space prints at Y-1. Then the letter prints at Y. This happens from 3 to 15—and the noise (line 440) makes it a thrilling adventure in computing.

After all this excitement you may want to stop a moment and observe that letters now appear at the top of the screen, and a letter just fell to near the bottom. Now what will happen?

Okay, so it's not that exciting! It will be when you put the catcher to work.

Lines 460-500 look along the line . where the letters are supposed to fall , and, if one is there (really, if a location is not a space), then line 490 remembers that exact spot by giving I its value. More later on that bit.

Lines 510-600 tidy things up.

Starting at HTAB 40 you move from right to left to HTAB 1 (line 520) and as you do, you move the Mickey Mouse cursor across the bottom of the screen by printing a CHR$(93)—wonder what that is?—followed by a space so that it looks like it's moving. Each time we do it we make a noise (line 550). Small wonder!

Line 570 just puts the finishing touches on the mishmash started in line 530.

Line 580 pretty much does the same thing, vertically, and now the pseudo cursor moves from VTAB 16 down to 19. Can you feel the excitement mounting?

Use the same technique (printing a character followed by a space in the spot just vacated) only this time SEE the characters instead of using ASCII numbers. No reason, just a change of pace.

Line 590 is a clean-up line similar in purpose to line 570. Must be a better way to do this, wouldn't you think?

Line 600 very grandly puts the letter originally selected into the right spot on the screen. The T + T + 1 thing increments (Nevada high-class word for counts up) one spot so that the next letter will print in the right place and not cream this one.

Lines 610-650 close up the line of alphabet soup_ in the top line. Without this little handy dandy subroutine here, the letters at the top would look like the hero of Rocky IX with a big grin.

What this couple of lines is trying desperately to do is look along the line of ABCs to see if one of the letters is missing. If it is (line 640) then another bunch of lines does the work. If it doesn't find any spots with holes—make that ASCII 160—it just goes back to line 280 and starts its next little dance again.

If it does—aha—lines 670-730 go to work in a most industrious manner. It is all a little blurry as we look at it, but somehow each letter location is looked at and is moved to the left one space. This crunches the whole line down one space, which is really about all you can expect since you removed only one letter from the line. Stick a period at the end of the line because one needs to be there.

Do this routine again—and again—to move the entire line down. You need not start at 1 each time (oh, that's what the J in line 280 was for!), but can instead (very ingeniously) start where you left off. Makes for a much faster move, should you be anxious to get back to your checkbook program, or the complex instruction manual for the "Apple Mechanic." We make this move until the line is completely filled again and then continue at line 280, via the line 620 route. Whew!

Fortunately you're near the end of the program and lines 760-810 merely count the number of words created. Truthfully, this program isn't bright enough to count words—it can't spell worth a darn either—but it can count periods. Those are the little dots we had to use to indicate the end of a word. So, if you don't cheat when you play (and use all periods and no letters) the program will know how many words you made. Probably.

The game then, mercifully, ends at line 740.

Lines 820-910 are instructions for play which only need to be typed into the program if you actually intend to play the game of Scanner.

Scanner should prove the basis of a good, interesting, educational game that can be lots of fun. I suggest that, for the highest score, you keep words short and clean. Proper nouns, names of restricted drugs, TV stars and animals on the endangered species list should not be used.

If you have interesting ideas for adaptation of this program for business, commercial, military or gambling purposes, clip your idea to a crisp new dollar bill and mail to the author—care of most any Las Vegas casino. And quickly, please.

P.S. Throughout this program I refer to a variety of numbers from 1024 to 2039, the screen locations that can be accessed directly by peeking, poking and what have you. If you would like to know just where all those things are, send a self-addressed, business size, stamped envelope and I'll send you an Apple Text Graphic sheet which will show you where all those places are. It is assumed, of course, that your TV set or monitor is electrically compatible with mine here in Nevada. We use 60 cycles, 110 volts, AC and get the stuff directly from Hoover Dam. It may not work if your TV set uses Hertz or Avis or whatever.

Address correspondence to:
Paul Raymer
PO Box 42831
Las Vegas , NV 89116
